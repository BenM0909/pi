#!/usr/bin/env python
import random
import re
import sys

from sly import Parser

from lexer import Lexer

vars = {"pi" : "3.141592653589793238462643383279502884197169399375105820"}
funcs = []

pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679  # Define the value of pi for calculations


class SingleQuoteError(Exception):
    def __init__(self):
        super().__init__("NO SINGLE QUOTES")


class Parser(Parser):
    # Get the token list from the lexer (required)

    tokens = Lexer.tokens
    exec_line = True
    append_line = False
    _else = False

    # Grammar rules and actions
    @_("SHOW")
    def expr(self, p):
        value = ""
        sep = " "
        end = "\n"
        item = p.SHOW[5:-1].strip('"')
        args = re.split(";;", item)
        for arg in args:
            arg2 = arg.strip()
            if arg2.startswith("sep ="):
                sep = arg2[5:].strip('"')
            elif arg2.startswith("sep="):
                sep = arg2[4:].strip('"')
            elif arg2.startswith("end ="):
                end = arg2[5:].strip('"')
            elif arg2.startswith("end="):
                end = arg2[4:].strip('"')
        for arg in args:
            if not(arg.startswith("sep =") or arg.startswith("sep=") or arg.startswith("end =") or arg.startswith("end=")):
                value = f"{value}{sep.strip()}{arg}"
        value = f"{value}{end}"
        print(value, sep = "", end = "")
            
        
    @_("MATH")
    def expr(self, p):
        return eval(p.MATH[5:-1])

    @_("VCUBE")
    def expr(self, p):
        return float(p.VCUBE[6:-1]) ** 3

    @_("VRECTPR")
    def expr(self, p):
        num1, num2, num3 = p.VRECTPR[8:-1].split(", ")
        return float(num1) * float(num2) * float(num3)

    @_("SARECTPR")
    def expr(self, p):
        num1, num2, num3 = p.SARECTPR[9:-1].split(", ")
        return (
            float(num1) * float(num2) * 2
            + float(num2) * float(num3) * 2
            + float(num3) * float(num1) * 2
        )

    @_("ARECT")
    def expr(self, p):
        num1, num2 = p.ARECT[6:-1].split(", ")
        return float(num1) * float(num2)

    @_("CIRCIRCLE")
    def expr(self, p):
        return round(pi * float(p.CIRCIRCLE[10:-1]), 4)

    @_("ACIRCLE")
    def expr(self, p):
        return round(pi * (float(p.ACIRCLE[8:-1]) ** 2), 4)

    @_("VCYL")
    def expr(self, p):
        height, radius = p.VCYL[5:-1].split(", ")
        return round(pi * (float(radius) ** 2), 4) * float(height)

    @_("SACYL")
    def expr(self, p):
        height, diameter = p.SACYL[6:-1].split(", ")
        area = round(pi * ((float(diameter) / 2) ** 2) * 2, 4)
        return area + round(pi * float(diameter) * float(height), 4)

    @_("VCONE")
    def expr(self, p):
        height, radius = p.VCONE[6:-1].split(", ")
        return round((pi * (float(radius) ** 2)) * float(height) / 3, 4)

    @_("SACONE")
    def expr(self, p):
        length, radius = p.SACONE[7:-1].split(", ")
        return round(
            (pi * (float(radius) ** 2)) + (pi * float(radius) * float(length)), 4
        )

    @_("VSPH")
    def expr(self, p):
        radius = p.VSPH[5:-1]
        return round(pi * (float(radius) ** 3) * 4 / 3, 4)

    @_("FRADIUS")
    def expr(self, p):
        diameter = int(p.FRADIUS[8:-1])
        return diameter / 2

    @_("BINARY")
    def expr(self, p):
        return bin(int(p.BINARY[7:-1]))

    @_("CHARACTER")
    def expr(self, p):
        return chr(int(p.CHARACTER[10:-1]))

    @_("LENGTH")
    def expr(self, p):
        return len(p.LENGTH[7:-1])

    @_("ORDINAL")
    def expr(self, p):
        return ord(p.ORDINAL[8:-1])

    @_("POWER")
    def expr(self, p):
        base, exponent = p.POWER[6:-1].split(", ")
        return float(base) ** float(exponent)

    @_("SASPH")
    def expr(self, p):
        radius = p.SASPH[6:-1]
        return round(4 * pi * (float(radius) ** 2), 4)

    @_("SACUBE")
    def expr(self, p):
        side = p.SACUBE[7:-1]
        return float(side) ** 2 * 6

    @_("BEN")
    def expr(self, p):
        x = 0
        while x < 1000000:
            with open(f"{x}.txt", "a+"):
                ...
            x += 1

    @_("VAR")
    def expr(self, p):
        name, value = p.VAR[4:-1].split("=")
        name = str(name).strip()
        value = str(value).strip()
        matches = re.search(r"_(.+)", value.strip(")"))
        if matches:
            args = matches.group(1).split(",")
            for i in range(len(args)):
                args[i] = args[i].rstrip(" =!<>:").strip()
                args[i] = re.sub(r"\s?_", "", args[i])
                value = value.replace(f"_{args[i]}", vars[args[i]])
        if value.upper().split("(")[0] in Lexer.tokens:
            value = parser.parse(lexer.tokenize(value))
        if value:
            vars[name] = str(value)
        else:
            vars[name] = "none"

    @_("ROUND")
    def expr(self, p):
        num, place = p.ROUND[6:-1].split(", ")
        return round(float(num), int(place))

    @_("RANDOMINT")
    def expr(self, p):
        min, max = p.RANDOMINT[10:-1].split(", ")
        return random.randint(int(min), int(max))

    @_("INPUT")
    def expr(self, p):
        return input(p.INPUT[6:-1])

    @_("IF")
    def expr(self, p):
        self.exec_line = bool(eval(p.IF[3:]))
        if self.exec_line:
            self._else = False
        else:
            self._else = True

    @_("ELSE")
    def expr(self, p):
        if not self._else:
            self.exec_line = False
        else:
            self.exec_line = True

    @_("ELIF")
    def expr(self, p):
        if self.exec_line:
            self.exec_line = False
        else:
            self.exec_line = bool(eval(p.ELIF[5:]))

    @_("ENDIF")
    def expr(self, p):
        self.exec_line = True

    @_("FUNC")
    def expr(self, p):
        args = p.FUNC[5:-1].split(", ")
        name = args[0]
        args = args[1:]
        lines = []
        exec_line = False
        
        with open(f"{sys.argv[1]}", "r") as file:
            for line in file:
                if line.startswith(f"func({name}"):
                    line = next(file).strip('\n')
                    while 'endfunc' not in line:
                        lines.append(line)
                        line = next(file).strip('\n')
                    break
        funcs.append({"name": name, "args": args, "lines": lines})        
        
    @_("ENDFUNC")
    def expr(self, p):
        pass

    @_("CALL")
    def expr(self, p):
        args = p.CALL[5:-1].split(", ")
        name = args[0]
        args = args[1:]
        in_func = False
        for func in funcs:
            if func["name"] == name:
                for arg in range(len(func["args"])):
                    if matches := re.search(r"(_(.+))", args[arg]):
                        if str(matches.group(1))[1:] in vars:
                            args[arg] = args[arg].replace(
                                matches.group(1),
                                vars[str(matches.group(2))],
                            )
                    vars[func["args"][arg]] = args[arg]
                for line in func["lines"]:
                    if in_func:
                        if line.startswith("endfunc"):
                            in_func = False
                        continue
                    if line.startswith("func"):
                        in_func = True
                    if (parser.exec_line or line == "else" or line == "elif" or line == "endif" or line == "endfunc") and line != str():
                        result = parse_args(line)
                        if result or result == 0:
                            print(result)
                for arg in range(len(func["args"])):
                    vars[func["args"][arg]] = "None"
                        



if __name__ == "__main__":
    lexer = Lexer()
    parser = Parser()

    def parse_args(text):
        if text == "else":
            return parser.parse(lexer.tokenize(text))
        _matches = re.search(r".+ [=!<>]=? .+", text, re.DOTALL)
        if matches := re.search(r".+\(([^\)]+)\)", text) or _matches:
            try:
                args = str(matches.group(1)).split(",")
                for i, arg in enumerate(args):
                    arg = arg.strip(" )")
                    _arg = re.search(r"(.+)\((.+)\)", text)
                    if _arg and _arg.group(2).upper() in lexer.tokens:
                        arg = parse_args(_arg.group(0))
                    if matches := re.search(r"(_(.+))", arg):
                        if str(matches.group(1))[1:] in vars:
                            if vars[str(matches.group(1))[1:]]:
                                text = text.replace(
                                    matches.group(1),
                                    vars[str(matches.group(1))[1:]],
                                )
                    elif matches := re.search(r"\\(\d{1,3})", arg):
                        arg = chr(int(matches.group(1)))
                        args[i] = arg
                    return parser.parse(lexer.tokenize(text))
            except IndexError:
                args = re.split(r" [=!<>]=? ", matches.group(0))
                for arg in args:
                    arg = arg.lstrip("elifs ")
                    if matches := re.search(r"(_(.+))", arg):
                        if str(matches.group(1))[1:] in vars:
                            text = text.replace(
                                matches.group(1), vars[str(matches.group(1))[1:]]
                            )
                        elif matches := re.search(r"\\(\d{1,3})", arg):
                            arg = chr(int(matches.group(1)))
                    return parser.parse(lexer.tokenize(text))

    try:
        with open(f"{sys.argv[1]}", "r") as file:
            reader = file.read()
            in_func = False
            for text in reader.splitlines():
                if in_func:
                    if text.startswith("endfunc"):
                        in_func = False
                    continue
                if text.startswith("func"):
                    in_func = True
                if parser.exec_line or text == "else" or text == "elif" or text == "endif" or text == "endfunc":
                    result = parse_args(text)
                    if result or result == 0:
                        print(result)
    except IndexError:
        while True:
            text = input("-> ")
            if text in ["exit", "dip"]:
                break
            result = parse_args(text)
            if result != str():
                print(result)
            
